package com.mycompany.app;

import java.util.Random;

public class App {

	public static void main(String[] args) {
	
		generateRandomArray();
		
		
		//findMedianSortedArrays(int[] nums1, int[] nums2);
	}

	public static void generateRandomArray() {

		int[] randomArray = {} ;
		int[] myIntArray = new int[3];
	    int randomNum = rand.nextInt((9 - 0) + 1) + 0;

		
		
		
		  Random rand;

		    // nextInt is normally exclusive of the top value,
		    // so add 1 to make it inclusive
		    int randomNum = rand.nextInt((9 - 0) + 1) + 0;

		    return randomNum;
	}

	public static double findMedianSortedArrays(int[] nums1, int[] nums2) {

		// edge cases

		// both are null
		if (nums1 == null && nums2 == null) {
			System.out.println("Both arrays were null.");
			return 0;
		}

		// One is null
		if (nums1 == null && nums2 != null) {
			if (nums2.length > 1) {
				System.out.println("First array is null, second array has more than one element.");
				return (nums2[0] - nums2[nums2.length - 1]) / 2;
			}
			System.out.println("First array is null, second array has one element.");
			return nums2[0];
		}

		// Two is null
		if (nums2 == null && nums1 != null) {
			if (nums1.length > 1) {
				System.out.println("Second array is null, first array has more than one element.");
				return (nums1[0] - nums1[nums1.length - 1]) / 2;
			}
			System.out.println("Second array is null, first array has one element.");
			return nums1[0];
		}

		// discard first half of first array
		int middleNumberOfFirstArray = (nums1.length / 2);

		System.arraycopy(source_arr, sourcePos, dest_arr, destPos, len);

		// discard second half of second array
		int middleNumberOfFirstArray = (nums1.length / 2);

	}
}

class Solution {
	public double findMedianSortedArrays(int[] nums1, int[] nums2) {

		// edge cases

		// both are null
		if (nums1 == null && nums2 == null) {
			System.out.println("Both arrays were null.");
			return 0;
		}

		// One is null
		if (nums1 == null && nums2 != null) {
			if (nums2.length > 1) {
				System.out.println("First array is null, second array has more than one element.");
				return (nums2[0] - nums2[nums2.length - 1]) / 2;
			}
			System.out.println("First array is null, second array has one element.");
			return nums2[0];
		}

		// Two is null
		if (nums2 == null && nums1 != null) {
			if (nums1.length > 1) {
				System.out.println("Second array is null, first array has more than one element.");
				return (nums1[0] - nums1[nums1.length - 1]) / 2;
			}
			System.out.println("Second array is null, first array has one element.");
			return nums1[0];
		}

		// discard first half of first array
		int middleNumberOfFirstArray = (nums1.length / 2);

		System.arraycopy(source_arr, sourcePos, dest_arr, destPos, len);

		// discard second half of second array
		int middleNumberOfFirstArray = (nums1.length / 2);

	}
}
